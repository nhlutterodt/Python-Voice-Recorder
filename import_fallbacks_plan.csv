file_path,line_context,old_pattern,new_import,reason,test_note,risk_level,suggested_commit,validated
"Python-Voice-Recorder/Python - Voice Recorder/src/enhanced_main.py","try:\n    from .enhanced_editor import EnhancedAudioEditor\n    from .config_manager import config_manager\nexcept Exception:\n    from enhanced_editor import EnhancedAudioEditor\n    from config_manager import config_manager","try: from .enhanced_editor import EnhancedAudioEditor; except: from enhanced_editor import EnhancedAudioEditor","from voice_recorder.enhanced_editor import EnhancedAudioEditor","Use consistent absolute imports from the package root to avoid runtime ambiguity between 'module as script' and package mode.","Run pytest; run a smoke start of the app (entrypoint) in dev mode.","medium","canonicalize imports: enhanced_main -> voice_recorder.enhanced_editor (and config_manager)","No: plan only"
"Python-Voice-Recorder/Python - Voice Recorder/src/enhanced_main.py","try:\n    from models.database import engine, Base\n    from core.logging_config import setup_application_logging\nexcept Exception:\n    from .models.database import engine, Base\n    from .core.logging_config import setup_application_logging","try: from models.database import engine, Base; except: from .models.database import engine, Base","from voice_recorder.models.database import engine, Base","Consistent absolute imports prevent different import resolution when running tests vs module.","Run pytest and verify logging setup; confirm DB metadata references work.","medium","canonicalize imports: models.database -> voice_recorder.models.database and core.logging_config -> voice_recorder.core.logging_config","No: plan only"
"Python-Voice-Recorder/Python - Voice Recorder/src/enhanced_editor.py","try:\n    from .waveform_viewer import WaveformViewer\nexcept Exception:\n    from waveform_viewer import WaveformViewer","try: from .waveform_viewer import WaveformViewer; except: from waveform_viewer import WaveformViewer","from voice_recorder.waveform_viewer import WaveformViewer","Keep single canonical import; avoids fallback try/except complexity and import-time surprises in tests.","Run pytest; run editor UI unit tests (qtbot) that import WaveformViewer.","medium","canonicalize imports in enhanced_editor -> voice_recorder.waveform_viewer","No: plan only"
"Python-Voice-Recorder/Python - Voice Recorder/src/enhanced_editor.py","try:\n    from .config_manager import config_manager\nexcept Exception:\n    from config_manager import config_manager","try: from .config_manager import config_manager; except: from config_manager import config_manager","from voice_recorder.config_manager import config_manager","config_manager is a global app module â€” normalize to absolute package import for predictable loading.","Run tests that exercise preferences/settings; ensure config_manager remains singleton-like.","medium","canonicalize imports: config_manager -> voice_recorder.config_manager","No: plan only"
"Python-Voice-Recorder/Python - Voice Recorder/src/enhanced_editor.py","try:\n    from .audio_processing import (\n        AudioLoaderThread,\n        AudioTrimProcessor\n    )\nexcept Exception:\n    from audio_processing import AudioLoaderThread, AudioTrimProcessor","try: from .audio_processing ... except: from audio_processing ...","from voice_recorder.audio_processing import AudioLoaderThread, AudioTrimProcessor","Normalize module imports to package-root absolute imports to avoid test runner import differences.","Run unit tests touching audio_processing; run a GUI smoke test for trimming.","medium","canonicalize imports: audio_processing -> voice_recorder.audio_processing","No: plan only"
"Python-Voice-Recorder/Python - Voice Recorder/src/enhanced_editor.py","try:\n    from .audio_recorder import AudioRecorderManager\nexcept Exception:\n    from audio_recorder import AudioRecorderManager","try: from .audio_recorder import AudioRecorderManager; except: from audio_recorder import AudioRecorderManager","from voice_recorder.audio_recorder import AudioRecorderManager","Audio recorder is central; consistent import avoids multiple loaded module instances in tests.","Run recorder-related tests, ensure signals/connections behave as before.","high","canonicalize imports: audio_recorder -> voice_recorder.audio_recorder","No: plan only"
"Python-Voice-Recorder/Python - Voice Recorder/src/entrypoint.py","try:\n    from .enhanced_main import EnhancedAudioEditor, start_job_worker\n    from .config_manager import config_manager\n    from core.logging_config import setup_application_logging\nexcept Exception:\n    from enhanced_main import EnhancedAudioEditor, start_job_worker\n    from config_manager import config_manager\n    from core.logging_config import setup_application_logging","pattern importing enhanced_main/config_manager with fallback to top-level","from voice_recorder.enhanced_main import EnhancedAudioEditor, start_job_worker; from voice_recorder.config_manager import config_manager; from voice_recorder.core.logging_config import setup_application_logging","Make entrypoint imports explicit and package-based so running via module or script is consistent.","Run app via 'python -m voice_recorder.entrypoint' and run tests referencing entrypoint.","low","canonicalize imports for entrypoint -> voice_recorder.*","No: plan only"
"Python-Voice-Recorder/Python - Voice Recorder/src/settings_ui.py","try:\n    from .config_manager import config_manager\nexcept Exception:\n    from config_manager import config_manager","try: from .config_manager import config_manager; except: from config_manager import config_manager","from voice_recorder.config_manager import config_manager","Settings UI uses config_manager; canonical import reduces import time errors in tests.","Run settings-related unit tests / dialog smoke tests.","low","canonicalize imports: settings_ui -> voice_recorder.config_manager","No: plan only"
"Python-Voice-Recorder/Python - Voice Recorder/src/audio_recorder.py","try:\n    from .performance_monitor import performance_monitor\nexcept Exception:\n    from performance_monitor import performance_monitor","try: from .performance_monitor import performance_monitor; except: from performance_monitor import performance_monitor","from voice_recorder.performance_monitor import performance_monitor","Canonicalize to voice_recorder.* to avoid different module objects loaded in package-mode vs script-mode.","Run audio_recorder unit tests and any tests that mock performance_monitor.","medium","canonicalize imports: performance_monitor -> voice_recorder.performance_monitor","No: plan only"
"Python-Voice-Recorder/Python - Voice Recorder/src/enhanced_audio_recorder.py","try:\n    from .performance_monitor import performance_monitor\r\nexcept Exception:\r\n    from performance_monitor import performance_monitor","try: from .performance_monitor import performance_monitor; except: from performance_monitor import performance_monitor","from voice_recorder.performance_monitor import performance_monitor","Same reasoning as audio_recorder; consistent imports simplify tests.","Run the enhanced audio recorder tests; quick headless run of manager.","medium","canonicalize imports: performance_monitor -> voice_recorder.performance_monitor","No: plan only"
"Python-Voice-Recorder/Python - Voice Recorder/cloud/cloud_ui.py","from .auth_manager import GoogleAuthManager\nfrom .drive_manager import GoogleDriveManager\nfrom .feature_gate import FeatureGate","intra-package relative imports in cloud package","from voice_recorder.cloud.auth_manager import GoogleAuthManager; from voice_recorder.cloud.drive_manager import GoogleDriveManager; from voice_recorder.cloud.feature_gate import FeatureGate","Cloud package modules should use absolute imports from package root to avoid ambiguity when package is used as 'cloud' vs under voice_recorder package.","Run cloud unit tests (headless) and GUI tests using qtbot; test import in both 'python -m' and direct script contexts. Validated: cloud-related tests and cloud fallback unit tests passed locally on branch feature/backend-robustness.","high","canonicalize imports: cloud/* -> voice_recorder.cloud.*","Yes: cloud tests passed locally"
"Python-Voice-Recorder/Python - Voice Recorder/cloud/drive_manager.py","uses lazy helpers _import_http() and many internal 'from .dedupe import compute_content_sha256' etc.","example: from .dedupe import compute_content_sha256","from voice_recorder.cloud.dedupe import compute_content_sha256","Lazy internal imports are fine but canonicalize module paths to voice_recorder.cloud.* to avoid top-level ambiguity.","Run cloud uploader tests, drive manager tests; test duplicate detection path. Validated: drive_manager unit tests (including the previously failing NotAuthenticated/APILibrariesMissing scenarios) passed locally after fixes on branch feature/backend-robustness.","high","canonicalize cloud internal imports -> voice_recorder.cloud.*","Yes: cloud tests passed locally"
"Python-Voice-Recorder/Python - Voice Recorder/cloud/google_uploader.py","from .dedupe import compute_content_sha256\nand usage of _import_http() helper","from .dedupe import compute_content_sha256","from voice_recorder.cloud.dedupe import compute_content_sha256","Uploader/adapter code is used by both legacy and new interfaces; canonical imports reduce test-time import issues.","Run uploader unit tests and the failing test that earlier required chunk-size handling. Validated: google_uploader unit tests passed locally as part of the cloud subset on branch feature/backend-robustness.","high","canonicalize imports in google_uploader -> voice_recorder.cloud.*","Yes: cloud tests passed locally"
"Python-Voice-Recorder/Python - Voice Recorder/cloud/auth_manager.py","try:\n    from config_manager import config_manager as _cfg_mgr  # type: ignore\n    self.config_manager = _cfg_mgr\nexcept Exception:\n    # If import fails, leave self.config_manager as None and fall back to file\n    self.config_manager = None","try: from config_manager import config_manager as _cfg_mgr; except: self.config_manager = None","from voice_recorder.config_manager import config_manager as _cfg_mgr","Avoid ambiguous local vs package imports; prefer package-root absolute imports so importing behavior is identical whether the app is run as a package or as a script.","Run unit tests that exercise GoogleAuthManager._get_client_config and flows where config_manager is injected or absent; verify behavior when config_manager is provided and when it falls back to client_secrets.json. Validated: GoogleAuthManager unit tests and cloud auth flows (mocked) passed locally on branch feature/backend-robustness.","medium","canonicalize imports: cloud.auth_manager -> voice_recorder.config_manager","Yes: cloud tests passed locally"
"Python-Voice-Recorder/Python - Voice Recorder/cloud/drive_manager.py","many guarded imports and helpers that import intra-cloud modules (e.g., from .dedupe import compute_content_sha256)","from .dedupe import compute_content_sha256","from voice_recorder.cloud.dedupe import compute_content_sha256","Drive manager uses intra-cloud relative imports and runtime guards; canonicalize to voice_recorder.cloud.* to avoid multiple module instances.","Run drive_manager unit tests and cloud integration smoke tests; exercise duplicate detection path. Validated: drive_manager tests and upload-related unit tests passed locally after targeted fixes on branch feature/backend-robustness.","high","canonicalize cloud.drive_manager -> voice_recorder.cloud.dedupe","Yes: cloud tests passed locally"
"Python-Voice-Recorder/Python - Voice Recorder/cloud/cloud_ui.py","multiple try/except around imports of auth_manager/drive_manager/cloud_ui components","from .auth_manager import GoogleAuthManager; from .drive_manager import GoogleDriveManager","from voice_recorder.cloud.auth_manager import GoogleAuthManager; from voice_recorder.cloud.drive_manager import GoogleDriveManager","Cloud package modules should use absolute imports from package root to avoid ambiguity when package is used as 'cloud' vs under voice_recorder package.","Run cloud unit tests (headless) and GUI tests using qtbot; test import in both 'python -m' and direct script contexts. Validated: cloud GUI and import behaviors tested locally (headless subset) on branch feature/backend-robustness.","high","canonicalize cloud.* imports -> voice_recorder.cloud.*","Yes: cloud tests passed locally"
"Python-Voice-Recorder/Python - Voice Recorder/scripts/init_db.py","sys.path.insert(0, str(project_root))\nfrom models import database as app_db","sys.path insertion + top-level app imports","from voice_recorder.models import database as app_db","DB init scripts import the application's models/database module; use package-root absolute imports for deterministic behavior when running via 'python -m' or as a script.","Run init_db in a dev environment (with and without existing DB file) to validate migrations and engine creation. Validated: canonical import tested locally by importing `voice_recorder.models.database` with PYTHONPATH set to repo root/app/src; engine created and import succeeded (no destructive operations performed during test run).","medium","canonicalize scripts/init_db.py -> from voice_recorder.models import database as app_db","Yes: script import validated locally"
"Python-Voice-Recorder/Python - Voice Recorder/scripts/check_jobs_table.py","sys.path.insert(0, os.getcwd())\nfrom cloud import job_queue_sql as jq","sys.path insertion + top-level import of cloud module","from voice_recorder.cloud import job_queue_sql as jq","Scripts that inspect DB/job tables should import the canonical models/database module under voice_recorder to avoid duplicate module instances and metadata mismatches.","Run check_jobs_table against a test DB and verify expected output. Validated: canonical imports imported successfully in a non-destructive smoke import on branch feature/backend-robustness.","low","canonicalize scripts/check_jobs_table.py -> from voice_recorder.cloud import job_queue_sql as jq","Yes: import-checked locally"
"Python-Voice-Recorder/Python - Voice Recorder/scripts/build/build_voice_recorder_pro.py","sys.path.insert(0, str(Path(__file__).parent.parent))\nfrom version import CURRENT_VERSION","sys.path insertion + top-level import","from voice_recorder.version import CURRENT_VERSION, get_version_info","Build scripts often manipulate sys.path to import project modules. Recommend canonical voice_recorder.* imports so the same module object is used by the app, CI, and build tooling.","Run the build script in a dev venv and verify version info is still read correctly; run a dry-run that generates build_info.json.","low","canonicalize build_voice_recorder_pro.py -> from voice_recorder.version import ...","No: plan only"
"Python-Voice-Recorder/Python - Voice Recorder/scripts/build/build_executable.py","from pyinstaller_config import get_build_config, generate_spec_file","top-level import from pyinstaller_config","from voice_recorder.pyinstaller_config import get_build_config, generate_spec_file","Build helper modules used by scripts should import application packages with the canonical prefix so tooling runs deterministically without depending on sys.path tweaks.","Run build_executable.py in a dev environment and ensure spec file generation and PyInstaller invocation continue to work.","low","canonicalize build_executable.py -> from voice_recorder.pyinstaller_config import ...","No: plan only"
"Python-Voice-Recorder/Python - Voice Recorder/scripts/smoke_record_test.py","sys.path.insert(0, str(project_root))\nfrom audio_recorder import AudioRecorderManager","sys.path insertion + top-level import of audio_recorder","from voice_recorder.audio_recorder import AudioRecorderManager","Smoke-test scripts import core app modules; canonicalize to voice_recorder.* so running script vs importing in tests yields the same module object.","Run the smoke script in a dev env and ensure it exercises recorder startup and DB writes without duplicating model metadata. Validated: canonical imports imported successfully in a non-destructive smoke import; note SQLAlchemy 'Table already defined' warning occurred due to prior imports in the same process â€” this is expected in interactive/import-check runs.","medium","canonicalize scripts/smoke_record_test.py -> from voice_recorder.audio_recorder import AudioRecorderManager","Yes: import-checked locally (non-destructive)"
"Python-Voice-Recorder/Python - Voice Recorder/scripts/comprehensive_analysis.py","sys.path.append(os.path.dirname(os.path.abspath(__file__)))\nfrom services.file_storage.config import StorageConfig","sys.path insertion + intra-services imports","from voice_recorder.services.file_storage.config import StorageConfig","Analysis scripts import app modules; canonicalize to voice_recorder.services.* for consistent import resolution and to avoid dual-loading modules during tests.","Run the analysis script with a sample recording set and confirm calculations. Validated: canonical imports imported successfully in a non-destructive smoke import on branch feature/backend-robustness.","low","canonicalize scripts/comprehensive_analysis.py -> voice_recorder.services.file_storage.*","Yes: import-checked locally"
"Python-Voice-Recorder/Python - Voice Recorder/services/enhanced_file_storage.py","try:\n    from services.file_storage.core import EnhancedFileStorageService\nexcept ImportError as e:\n    _import_success = False","try/except facade and re-exports","from voice_recorder.services.file_storage.core import EnhancedFileStorageService","Facade modules that re-export internal subpackages should reference canonical voice_recorder.* imports to avoid dual-loading the same logical module under different names in tests and scripts.","Run services import smoke tests and unit tests for file_storage; verify __all__ and facade exports remain compatible. Validated: service-related tests (file_storage & backend_enhancements subset) passed locally on branch feature/backend-robustness.","medium","canonicalize services/enhanced_file_storage.py -> voice_recorder.services.file_storage.*","Yes: service tests passed locally"
"Python-Voice-Recorder/Python - Voice Recorder/services/file_storage/config/storage_config.py","from .path_management import StoragePathManager","single-dot intra-package import","from voice_recorder.services.file_storage.config.path_management import StoragePathManager","Normalize single-dot intra-package imports to voice_recorder.services.file_storage.*","Run storage-config parser and path management tests. Validated: storage_config and path-management related tests passed locally as part of the services test subset on branch feature/backend-robustness.","medium","canonicalize services.file_storage.config.storage_config imports","Yes: service tests passed locally"
"Python-Voice-Recorder/Python - Voice Recorder/services/file_storage/core/enhanced_file_storage_service.py","    from ....core.database_context import DatabaseContextManager","multi-level relative import","from voice_recorder.core.database_context import DatabaseContextManager","This file uses relative imports up to 4 levels â€” canonicalize to voice_recorder.core.* to be explicit and robust.","Run EnhancedFileStorageService unit tests; ensure DB context usage remains unaffected. Validated: EnhancedFileStorageService and related DB context tests passed locally as part of the services test subset on branch feature/backend-robustness.","high","canonicalize multi-level relative imports -> voice_recorder.core.*","Yes: service tests passed locally"
"Python-Voice-Recorder/Python - Voice Recorder/src/entrypoint.py","if __name__ == '__main__': ...","module has __main__ entrypoint and fallback imports","from voice_recorder.enhanced_main import EnhancedAudioEditor, start_job_worker","Entrypoint should import from the canonical voice_recorder package; prefer 'python -m voice_recorder.entrypoint' for execution.","Run the entrypoint via -m and via script mode to validate behavior.","low","canonicalize entrypoint imports -> voice_recorder.*","No: plan only"
