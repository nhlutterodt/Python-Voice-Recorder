name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v2.0.1)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag name
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Extract version from tag
        id: get_version
        run: |
          TAG="${{ steps.get_tag.outputs.tag }}"
          VERSION="${TAG#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Extract changelog for version
        id: changelog
        run: |
          TAG="${{ steps.get_tag.outputs.tag }}"
          VERSION="${TAG#v}"
          
          cd "Python - Voice Recorder"
          
          # Extract changelog section for this version
          if [ -f "CHANGELOG.md" ]; then
            # Try to extract the section for this version
            CHANGELOG_SECTION=$(sed -n "/## \[${VERSION}\]/,/## \[/p" CHANGELOG.md | sed '$d')
            
            # If specific version not found, use Unreleased section
            if [ -z "$CHANGELOG_SECTION" ]; then
              CHANGELOG_SECTION=$(sed -n "/## \[Unreleased\]/,/## \[/p" CHANGELOG.md | sed '$d')
            fi
            
            # Save to file for upload
            echo "$CHANGELOG_SECTION" > ../release-notes.md
            echo "Release notes extracted"
          else
            echo "# Release $VERSION" > ../release-notes.md
            echo "" >> ../release-notes.md
            echo "See CHANGELOG.md for details." >> ../release-notes.md
            echo "CHANGELOG.md not found, using default notes"
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools

      - name: Build wheel and sdist
        run: python -m build
        working-directory: 'Python - Voice Recorder'

      - name: Install package for testing
        run: |
          pip install "Python - Voice Recorder/dist/"*.whl

      - name: Smoke test installation
        run: |
          python -c "import voice_recorder; print('Package imported successfully')" || true

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: Voice Recorder Pro ${{ steps.get_tag.outputs.tag }}
          body_path: release-notes.md
          draft: true
          prerelease: ${{ contains(steps.get_tag.outputs.tag, '-alpha') || contains(steps.get_tag.outputs.tag, '-beta') || contains(steps.get_tag.outputs.tag, '-rc') }}

      - name: Upload wheel to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Python - Voice Recorder/dist/voice_recorder_pro-${{ steps.get_version.outputs.version }}-py3-none-any.whl
          asset_name: voice_recorder_pro-${{ steps.get_version.outputs.version }}-py3-none-any.whl
          asset_content_type: application/x-wheel+zip

      - name: Upload sdist to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Python - Voice Recorder/dist/voice_recorder_pro-${{ steps.get_version.outputs.version }}.tar.gz
          asset_name: voice_recorder_pro-${{ steps.get_version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Download Windows executable from build workflow
        continue-on-error: true
        run: |
          # Try to get the latest build workflow run for this tag
          echo "Attempting to download Windows executable..."
          gh run download --name windows-exe --dir windows-build || echo "No Windows exe available"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows executable to release
        continue-on-error: true
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows-build/VoiceRecorderPro.exe
          asset_name: VoiceRecorderPro-${{ steps.get_version.outputs.version }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Generate release summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Release created**: ${{ steps.get_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL**: ${{ steps.create_release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Python wheel (`.whl`)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Source distribution (`.tar.gz`)" >> $GITHUB_STEP_SUMMARY
          echo "- ⚠️ Windows executable (`.exe`) - if available" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the draft release" >> $GITHUB_STEP_SUMMARY
          echo "2. Test the artifacts" >> $GITHUB_STEP_SUMMARY
          echo "3. Publish the release when ready" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: Draft (manual publish required)" >> $GITHUB_STEP_SUMMARY

      - name: Output release info
        run: |
          echo "Release created successfully!"
          echo "Release URL: ${{ steps.create_release.outputs.html_url }}"
          echo "Upload URL: ${{ steps.create_release.outputs.upload_url }}"
          echo ""
          echo "The release is currently in DRAFT status."
          echo "Review it at: ${{ steps.create_release.outputs.html_url }}"
          echo "Then publish it manually when ready."
